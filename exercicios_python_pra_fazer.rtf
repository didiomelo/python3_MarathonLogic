{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 TrebuchetMS;}
{\colortbl;\red255\green255\blue255;\red13\green63\blue129;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh14740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class ProcessFile:\
\
    def reader_rows(file_name, type='r'):\
        file = open(file_name, type)\
        rows_data = file.readlines()\
        file.close()\
        return rows_data\
\
        \
class MeuErro(Exception):\
  def __init__(self, valor):\
    self.valor = valor\
  def __str__(self):\
    return repr(self.valor)\
\
try:\
  raise MeuErro(2*2)\
except MeuErro as e:\
  print('Minha exce\'e7\'e3o ocorreu, valor:', e.valor)\
\
\
\
class Substracao(object):\
\
    def __init__(self, expressao_esquerda, expressao_direita):\
        self.__expressao_esquerda = expressao_esquerda \
        self.__expressao_direita = expressao_direita\
\
class Soma(object):\
\
    def __init__(self, expressao_esquerda, expressao_direita):\
        self.__expressao_esquerda = expressao_esquerda \
        self.__expressao_direita = expressao_direita\
\
class Numero(object):\
\
    def __init__(self, numero):\
        self.__numero = numero\
\
\
class Numero(object):\
\
    def __init__(self, numero):\
        self.__numero = numero\
\
    def avalia(self):\
        return self.__numero\
\
\
class Substracao(object):\
\
    def __init__(self, expressao_esquerda, expressao_direita):\
        self.__expressao_esquerda = expressao_esquerda \
        self.__expressao_direita = expressao_direita\
\
    def avalia(self):\
        return (self.__expressao_esquerda.avalia() \
            - self.__expressao_direita.avalia())\
\
class Soma(object):\
\
    def __init__(self, expressao_esquerda, expressao_direita):\
        self.__expressao_esquerda = expressao_esquerda \
        self.__expressao_direita = expressao_direita\
\
    def avalia(self):\
        return (self.__expressao_esquerda.avalia() \
            + self.__expressao_direita.avalia())\
\
\
\
\
\
if __name__ == '__main__':\
\
    expressao_esquerda = Substracao(Numero(10), Numero(5))\
    expressao_direita = Soma(Numero(2), Numero(10))\
    expressao_conta = Soma(expressao_esquerda, expressao_direita)\
\
    resultado = expressao_conta.avalia()\
    print resultado\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs25\fsmilli12800 \cf2 \expnd0\expndtw0\kerning0
#UTILS\
import sys\
import random\
\
#FUNCTION DICTIONARY EXIST DATA\
def exist_data(data_dictionary, data_find):\
\'a0\'a0 \'a0if data_find in data_dictionary:\
\'a0\'a0 \'a0\'a0\'a0 \'a0print_log('CONTAINS - DATA_DICTIONARY: \{\}'.format(data_find))\
\'a0\'a0 \'a0else:\
\'a0\'a0 \'a0\'a0\'a0 \'a0print_log('NOT CONTAINS DATA IN THE DICTIONARY.')\
\
#FUNCTION LIST EXIST DATA\
def exist_data(data_list, data_find):\
\'a0\'a0 \'a0return (data_find.upper in data_list)\
\
#FUNCTION RANDOM NUMBER\
def get_random_number(end_seed, start_seed=0):\
\'a0\'a0 \'a0try:\
\'a0\'a0 \'a0\'a0\'a0 \'a0random_number = random.randrange(start_seed, end_seed)\
\'a0\'a0 \'a0except:\
\'a0\'a0 \'a0\'a0\'a0 \'a0random_number = -1\
\'a0\'a0 \'a0\'a0\'a0 \'a0print_log('get_random_number')\
\'a0\'a0 \'a0return random_number\
\
#FUNCTION RANDOM QUESTION\
# -*- coding: utf-8 -*-\
def get_random_question(file_name, cod_index):\
\'a0\'a0 \'a0try:\
\'a0\'a0 \'a0\'a0\'a0 \'a0questions_file = []\
\'a0\'a0 \'a0\'a0\'a0 \'a0data_file = open(file_name, 'r')\
\'a0\'a0 \'a0\'a0\'a0 \'a0rows_file = data_file.readlines()\
\'a0\'a0 \'a0\'a0\'a0 \'a0for row in rows_file:\
\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0questions_file.append(row + '\\n')\
\'a0\'a0 \'a0\'a0\'a0 \'a0data_file.close\
\'a0\'a0 \'a0\'a0\'a0 \'a0random_question = questions_file[cod_index].strip()\
\'a0\'a0 \'a0except:\
\'a0\'a0 \'a0\'a0\'a0 \'a0random_question = '-'\
\'a0\'a0 \'a0\'a0\'a0 \'a0print_log('get_random_question')\
\'a0\'a0 \'a0return random_question\
\'a0\'a0 \'a0\
#FUNCTION PRINT_ERROR\
def print_error(name_method):\
\'a0\'a0 \'a0print('Unexpected error in the method: ' + name_method, sys.exc_info()[0])\
\'a0\'a0 \'a0\
#FUNCTION PRINT_LOG\
def print_log(name_method):\
\'a0\'a0 \'a0print('Log-data write in the method: ' + name_method, sys.exc_info()[0])\
\'a0\'a0 \'a0\
if __name__ == '__main__':\
\'a0\'a0 \'a0call_method()
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
}